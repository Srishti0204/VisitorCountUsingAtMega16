
sensor_project_entry_exit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002e6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  000002ee  00000362  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000053  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000045e  00000000  00000000  000003d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014d  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fc  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000111  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021e  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000110b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  8a:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
void lcd_command(unsigned char cmd)
{    lcd=cmd&0xF0;  //e=0 rw=0 rs=0
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	22 bb       	out	0x12, r18	; 18
     lcd|=0x04;     //e=1
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	40 ea       	ldi	r20, 0xA0	; 160
  9c:	5f e0       	ldi	r21, 0x0F	; 15
  9e:	fa 01       	movw	r30, r20
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_command+0xe>
	 _delay_ms(1);
	 lcd=lcd&0xF0;  //e=0
  a4:	22 b3       	in	r18, 0x12	; 18
  a6:	20 7f       	andi	r18, 0xF0	; 240
  a8:	22 bb       	out	0x12, r18	; 18
  aa:	fa 01       	movw	r30, r20
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_command+0x1a>
	 _delay_ms(1);
	 lcd=(cmd<<4)&0xF0;
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	2a 95       	dec	r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <lcd_command+0x22>
  bc:	82 bb       	out	0x12, r24	; 18
	 lcd|=0x04;
  be:	92 9a       	sbi	0x12, 2	; 18
  c0:	ca 01       	movw	r24, r20
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_command+0x30>
	 _delay_ms(1);
	 lcd=lcd&0xF0;
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	ca 01       	movw	r24, r20
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_command+0x3c>
	 _delay_ms(1);
}
  d2:	08 95       	ret

000000d4 <lcd_data>:
void lcd_data(unsigned char abc)
{    lcd=abc&0xF0; //e=0 rw=0 rs=0
  d4:	28 2f       	mov	r18, r24
  d6:	20 7f       	andi	r18, 0xF0	; 240
  d8:	22 bb       	out	0x12, r18	; 18
     lcd|=0x05;    //rs=1 e=1
  da:	22 b3       	in	r18, 0x12	; 18
  dc:	25 60       	ori	r18, 0x05	; 5
  de:	22 bb       	out	0x12, r18	; 18
  e0:	40 ea       	ldi	r20, 0xA0	; 160
  e2:	5f e0       	ldi	r21, 0x0F	; 15
  e4:	fa 01       	movw	r30, r20
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_data+0x12>
	 _delay_ms(1);
	 lcd=lcd&0xF1; //e=0
  ea:	22 b3       	in	r18, 0x12	; 18
  ec:	21 7f       	andi	r18, 0xF1	; 241
  ee:	22 bb       	out	0x12, r18	; 18
  f0:	fa 01       	movw	r30, r20
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_data+0x1e>
	 _delay_ms(1);
	 lcd=(abc<<4)&0xF0;
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	34 e0       	ldi	r19, 0x04	; 4
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	3a 95       	dec	r19
 100:	e1 f7       	brne	.-8      	; 0xfa <lcd_data+0x26>
 102:	82 bb       	out	0x12, r24	; 18
	 lcd|=0x05;
 104:	82 b3       	in	r24, 0x12	; 18
 106:	85 60       	ori	r24, 0x05	; 5
 108:	82 bb       	out	0x12, r24	; 18
 10a:	ca 01       	movw	r24, r20
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_data+0x38>
	 _delay_ms(1);
	 lcd=lcd&0xF1;
 110:	82 b3       	in	r24, 0x12	; 18
 112:	81 7f       	andi	r24, 0xF1	; 241
 114:	82 bb       	out	0x12, r24	; 18
 116:	ca 01       	movw	r24, r20
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_data+0x44>
	 _delay_ms(1);
}
 11c:	08 95       	ret

0000011e <lcd_ini>:
void lcd_ini()
{
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
     lcd_command(0x02);  //home position
	 lcd_command(0x28);  //4 bit mode
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	 lcd_command(0x0c);  //display on cursor off
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
     lcd_command(0x06);  //auto increments the address
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 136:	08 95       	ret

00000138 <lcd_string>:
#define F_CPU 16000000UL
#include<util/delay.h>
#define lcd PORTD
#include<library/lcd.h>
void lcd_string(unsigned char *str)
{    int i=0;
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <lcd_string+0xc>
     while(str[i]!='\0')
	 {   lcd_data(str[i]);
 140:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
#include<util/delay.h>
#define lcd PORTD
#include<library/lcd.h>
void lcd_string(unsigned char *str)
{    int i=0;
     while(str[i]!='\0')
 144:	89 91       	ld	r24, Y+
 146:	88 23       	and	r24, r24
 148:	d9 f7       	brne	.-10     	; 0x140 <lcd_string+0x8>
	 {   lcd_data(str[i]);
	     i++;
     }
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <main>:
void main()
{    
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	DDRA=0b01111110;
 160:	8e e7       	ldi	r24, 0x7E	; 126
 162:	8a bb       	out	0x1a, r24	; 26
     DDRD=0b11111111;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	81 bb       	out	0x11, r24	; 17
     lcd_ini();
 168:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_ini>
 16c:	00 91 6a 00 	lds	r16, 0x006A
 170:	10 91 6b 00 	lds	r17, 0x006B
 174:	c0 91 68 00 	lds	r28, 0x0068
 178:	d0 91 69 00 	lds	r29, 0x0069
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	40 e9       	ldi	r20, 0x90	; 144
 180:	e4 2e       	mov	r14, r20
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	f4 2e       	mov	r15, r20
 186:	01 c0       	rjmp	.+2      	; 0x18a <main+0x3a>
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	6e 01       	movw	r12, r28
 18c:	08 94       	sec
 18e:	c1 08       	sbc	r12, r1
 190:	d1 08       	sbc	r13, r1
	 static int i=0,j=0;
	 
     while(1)
	 {    lcd_command(0x80);
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	 	  lcd_string("IN");
 198:	80 e6       	ldi	r24, 0x60	; 96
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_string>
		  lcd_command(0x8d);
 1a0:	8d e8       	ldi	r24, 0x8D	; 141
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		  lcd_string("OUT");
 1a6:	83 e6       	ldi	r24, 0x63	; 99
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_string>
          //if(PINA==0b00000001)
		  if(PINA==0x01)
 1ae:	89 b3       	in	r24, 0x19	; 25
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	a1 f5       	brne	.+104    	; 0x21c <main+0xcc>
		  {     i=i+1;
 1b4:	0f 5f       	subi	r16, 0xFF	; 255
 1b6:	1f 4f       	sbci	r17, 0xFF	; 255
		        while(PINA&0x01);
 1b8:	c8 99       	sbic	0x19, 0	; 25
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <main+0x68>
				if(i<10)
 1bc:	0a 30       	cpi	r16, 0x0A	; 10
 1be:	11 05       	cpc	r17, r1
 1c0:	7c f4       	brge	.+30     	; 0x1e0 <main+0x90>
	 	        { 	lcd_command(0xc1);
 1c2:	81 ec       	ldi	r24, 0xC1	; 193
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				    lcd_data(48+i);
 1c8:	80 2f       	mov	r24, r16
 1ca:	80 5d       	subi	r24, 0xD0	; 208
 1cc:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
 1d0:	80 ed       	ldi	r24, 0xD0	; 208
 1d2:	97 e0       	ldi	r25, 0x07	; 7
 1d4:	f7 01       	movw	r30, r14
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x86>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <main+0x84>
 1de:	1e c0       	rjmp	.+60     	; 0x21c <main+0xcc>
					_delay_ms(200);
                }
				else
				{   lcd_command(0xc1);
 1e0:	81 ec       	ldi	r24, 0xC1	; 193
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				    lcd_data(48+(i/10));
 1e6:	c8 01       	movw	r24, r16
 1e8:	6a e0       	ldi	r22, 0x0A	; 10
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 4a 01 	call	0x294	; 0x294 <__divmodhi4>
 1f0:	86 2f       	mov	r24, r22
 1f2:	80 5d       	subi	r24, 0xD0	; 208
 1f4:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_command(0xc2);
 1f8:	82 ec       	ldi	r24, 0xC2	; 194
 1fa:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
					lcd_data(48+(i%10));
 1fe:	c8 01       	movw	r24, r16
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	0e 94 4a 01 	call	0x294	; 0x294 <__divmodhi4>
 208:	80 5d       	subi	r24, 0xD0	; 208
 20a:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
 20e:	80 ed       	ldi	r24, 0xD0	; 208
 210:	97 e0       	ldi	r25, 0x07	; 7
 212:	f7 01       	movw	r30, r14
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 218:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21a:	d9 f7       	brne	.-10     	; 0x212 <main+0xc2>
           }
          
		  
	      //else if(PINA==0b10000000)
		  
		   if((PINA==0x80)&&(j<=i-1))
 21c:	89 b3       	in	r24, 0x19	; 25
 21e:	80 38       	cpi	r24, 0x80	; 128
 220:	09 f0       	breq	.+2      	; 0x224 <main+0xd4>
 222:	b7 cf       	rjmp	.-146    	; 0x192 <main+0x42>
 224:	c0 16       	cp	r12, r16
 226:	d1 06       	cpc	r13, r17
 228:	0c f0       	brlt	.+2      	; 0x22c <main+0xdc>
 22a:	b3 cf       	rjmp	.-154    	; 0x192 <main+0x42>
		   {     
	            j=j+1;
	            while(PINA&0x80);       //empty loop to hold the sensor i.e even if the person keeps standing 
 22c:	cf 99       	sbic	0x19, 7	; 25
 22e:	fe cf       	rjmp	.-4      	; 0x22c <main+0xdc>
				                        //the counter doesnt increase
				if(j<10)
 230:	ca 30       	cpi	r28, 0x0A	; 10
 232:	d1 05       	cpc	r29, r1
 234:	84 f4       	brge	.+32     	; 0x256 <main+0x106>
				{   lcd_command(0xcd);
 236:	8d ec       	ldi	r24, 0xCD	; 205
 238:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				    lcd_data(48+j);
 23c:	9e 01       	movw	r18, r28
 23e:	20 5d       	subi	r18, 0xD0	; 208
 240:	82 2f       	mov	r24, r18
 242:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
 246:	80 ed       	ldi	r24, 0xD0	; 208
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	f7 01       	movw	r30, r14
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 250:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 252:	d9 f7       	brne	.-10     	; 0x24a <main+0xfa>
 254:	99 cf       	rjmp	.-206    	; 0x188 <main+0x38>
					_delay_ms(200);
                }
				else
				{   lcd_command(0xcd);
 256:	8d ec       	ldi	r24, 0xCD	; 205
 258:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				    lcd_data(48+(j/10));
 25c:	ce 01       	movw	r24, r28
 25e:	6a e0       	ldi	r22, 0x0A	; 10
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	0e 94 4a 01 	call	0x294	; 0x294 <__divmodhi4>
 266:	86 2f       	mov	r24, r22
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_command(0xce);
 26e:	8e ec       	ldi	r24, 0xCE	; 206
 270:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
					lcd_data(48+(j%10));
 274:	ce 01       	movw	r24, r28
 276:	6a e0       	ldi	r22, 0x0A	; 10
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	0e 94 4a 01 	call	0x294	; 0x294 <__divmodhi4>
 27e:	80 5d       	subi	r24, 0xD0	; 208
 280:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
 284:	80 ed       	ldi	r24, 0xD0	; 208
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	f7 01       	movw	r30, r14
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0x13a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	d9 f7       	brne	.-10     	; 0x288 <main+0x138>
 292:	7a cf       	rjmp	.-268    	; 0x188 <main+0x38>

00000294 <__divmodhi4>:
 294:	97 fb       	bst	r25, 7
 296:	09 2e       	mov	r0, r25
 298:	07 26       	eor	r0, r23
 29a:	0a d0       	rcall	.+20     	; 0x2b0 <__divmodhi4_neg1>
 29c:	77 fd       	sbrc	r23, 7
 29e:	04 d0       	rcall	.+8      	; 0x2a8 <__divmodhi4_neg2>
 2a0:	0c d0       	rcall	.+24     	; 0x2ba <__udivmodhi4>
 2a2:	06 d0       	rcall	.+12     	; 0x2b0 <__divmodhi4_neg1>
 2a4:	00 20       	and	r0, r0
 2a6:	1a f4       	brpl	.+6      	; 0x2ae <__divmodhi4_exit>

000002a8 <__divmodhi4_neg2>:
 2a8:	70 95       	com	r23
 2aa:	61 95       	neg	r22
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255

000002ae <__divmodhi4_exit>:
 2ae:	08 95       	ret

000002b0 <__divmodhi4_neg1>:
 2b0:	f6 f7       	brtc	.-4      	; 0x2ae <__divmodhi4_exit>
 2b2:	90 95       	com	r25
 2b4:	81 95       	neg	r24
 2b6:	9f 4f       	sbci	r25, 0xFF	; 255
 2b8:	08 95       	ret

000002ba <__udivmodhi4>:
 2ba:	aa 1b       	sub	r26, r26
 2bc:	bb 1b       	sub	r27, r27
 2be:	51 e1       	ldi	r21, 0x11	; 17
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <__udivmodhi4_ep>

000002c2 <__udivmodhi4_loop>:
 2c2:	aa 1f       	adc	r26, r26
 2c4:	bb 1f       	adc	r27, r27
 2c6:	a6 17       	cp	r26, r22
 2c8:	b7 07       	cpc	r27, r23
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <__udivmodhi4_ep>
 2cc:	a6 1b       	sub	r26, r22
 2ce:	b7 0b       	sbc	r27, r23

000002d0 <__udivmodhi4_ep>:
 2d0:	88 1f       	adc	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	5a 95       	dec	r21
 2d6:	a9 f7       	brne	.-22     	; 0x2c2 <__udivmodhi4_loop>
 2d8:	80 95       	com	r24
 2da:	90 95       	com	r25
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
